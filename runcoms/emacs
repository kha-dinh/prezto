;;; packge --- Summary
;;; Commentary:
;;; Code:
;; Bug fix for newer Emacs
(defmacro define-obsolete-function-alias ( obsolete-name current-name
                                           &optional when docstring)
  "Set OBSOLETE-NAME's function definition to CURRENT-NAME and mark it obsolete.
\(define-obsolete-function-alias \\='old-fun \\='new-fun \"22.1\" \"old-fun's doc.\")
is equivalent to the following two lines of code:
\(defalias \\='old-fun \\='new-fun \"old-fun's doc.\")
\(make-obsolete \\='old-fun \\='new-fun \"22.1\")
WHEN should be a string indicating when the function was first
made obsolete, for example a date or a release number.
See the docstrings of `defalias' and `make-obsolete' for more details."
  (declare (doc-string 4)
           (advertised-calling-convention
            ;; New code should always provide the `when' argument
            (obsolete-name current-name when &optional docstring) "23.1"))
  `(progn
     (defalias ,obsolete-name ,current-name ,docstring)
     (make-obsolete ,obsolete-name ,current-name ,when)))
;; Straight:
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
;; Key bindings
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x C-k") 'kill-buffer-and-window)
(straight-use-package 'use-package)

(global-set-key (kbd "C-x C-r") 'eval-region)

;; Magit
(use-package magit)
;; Directory tree
(use-package neotree
  :config
  (global-set-key [f8] 'neotree-toggle)
  )
;; Auto resize windows
(use-package zoom
  :config
  (zoom-mode)
  (setq zoom-size '(0.618 . 0.8))
  )
;; Dashboard
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  )
;; Dim other panels when not used
(use-package dimmer
  :config
  (dimmer-mode)
  (dimmer-configure-which-key)
  (dimmer-configure-company-box)
  (dimmer-configure-magit)
  (dimmer-configure-posframe)
  ;; (dimmer-fraction 0.6)
  )
;; Centaur tabs
(use-package centaur-tabs
  :init
  (centaur-tabs-mode +1)
  (global-set-key (kbd "C-x <left>")  'centaur-tabs-backward)
  (global-set-key (kbd "C-x <right>") 'centaur-tabs-forward)
  (centaur-tabs-headline-match)
  (centaur-tabs-group-by-projectile-project)
  :config
  (setq centaur-tabs-style "wave")
  (setq centaur-tabs-set-icons t)
  )

(use-package nyan-mode
  :init
  (setq nyan-wavy-trail t)
  (setq nyan-animation-frame-interval 0.1)
  :config
  (nyan-start-animation)
  )
;;(setq zone-timer (run-with-idle-timer  t 'zone))
(use-package material-theme
  :straight (material-theme :type git :host github :repo "cpaulik/emacs-material-theme"
                            :fork (:host github
                                         :repo "kha-dinh/emacs-material-theme"))
  :config
  (add-hook 'after-init-hook (lambda () (load-theme 'material t)))
  )

(setq vc-follow-symlinks t)

;;;;;;;;;;;;;;;;;;;;;;;
;; PROGRAMMING
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package jedi
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
  (setq jedi:get-in-function-call-delay 5000)
  (setq jedi:tooltip-medthod nil)
  :config
  (jedi:install-server))
(use-package elpy
  :config
  (elpy-enable)
  (setq elpy-rpc-backend "jedi")
  )
(setq c-default-style "linux")
(setq c-basic-offset 2)
;;    Auto close brackets
(electric-pair-mode)



;; linker scrip mode
(use-package ld-mode
  :straight (ld-mode :type git :host github :repo "spenczar/ld-mode")
  :config
  (ld-mode)
  )

(use-package flycheck
  :init
  (add-hook 'c++-mode-hook
            (lambda () (setq flycheck-clang-language-standard "c++11")))
  (global-flycheck-mode)
  (defun include-paths ()
    ;; Add include dir to path
    (setq flycheck-clang-include-path (list (expand-file-name "../include"))))

  (add-hook 'c++-mode-hook 'include-paths)
  (add-hook 'c-mode-hook 'include-paths)
  )
;; Configs from tuhdo
;; (add-to-list 'load-path "~/.zprezto/emacs-pkgs/custom")
;; (require 'setup-general)
(menu-bar-mode -1)
(tool-bar-mode -1)

(setq gc-cons-threshold 100000000)
(setq inhibit-startup-message t)

(defalias 'yes-or-no-p 'y-or-n-p)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook
          (lambda () (interactive)
            (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;; Compilation
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

;; setup GDB
(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t
 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )


;; Package zygospore
;; (use-package zygospore
;;   :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
;;          ("RET" .   newline-and-indent)))

;; automatically indent when press RET
;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)
(windmove-default-keybindings)

;;    (require 'setup-helm)
;; (require 'setup-cedet)
;; Mouse?
;;  (setq helm-allow-mouse t)

;;(require 'setup-helm-gtags)
;; (require 'setup-editing)

(setq global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
      mark-ring-max 5000                ; increase kill ring to contains 5000 entries
      mode-require-final-newline t      ; add a newline to end of file
      tab-width 4                       ; default to 4 visible spaces to display a tab
      )

(add-hook 'sh-mode-hook (lambda ()
                          (setq tab-width 4)))

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)

(setq-default indent-tabs-mode nil)
(delete-selection-mode)
(global-set-key (kbd "RET") 'newline-and-indent)

;; GROUP: Editing -> Killing
(setq kill-ring-max 5000 ; increase kill-ring capacity
      kill-whole-line t  ; if NIL, kill whole line and move the next line up
      )

;; show whitespace in diff-mode
(add-hook 'diff-mode-hook (lambda ()
                            (setq-local whitespace-style
                                        '(face
                                          tabs
                                          tab-mark
                                          spaces
                                          space-mark
                                          trailing
                                          indentation::space
                                          indentation::tab
                                          newline
                                          newline-mark))
                            (whitespace-mode 1)))

;; Package: volatile-highlights
;; GROUP: Editing -> Volatile Highlights
(use-package volatile-highlights
  :init
  (volatile-highlights-mode t))

;; Package: undo-tree
;; GROUP: Editing -> Undo -> Undo Tree
(use-package undo-tree
  :bind
  (("C-/" . 'undo-tree-undo))
  (("C-x C-/" . 'undo-tree-redo))
  :init
  (global-undo-tree-mode 1))

;; Package: yasnippet
;; GROUP: Editing -> Yasnippet
;; Package: yasnippet
(use-package yasnippet
  :defer t
  :init
  (use-package yasnippet-snippets)
  (add-hook 'prog-mode-hook 'yas-minor-mode))

;; Package: clean-aindent-mode
(use-package clean-aindent-mode
  :init
  (add-hook 'prog-mode-hook 'clean-aindent-mode))

;; Package: dtrt-indent
(use-package dtrt-indent
  :init
  (dtrt-indent-mode 1)
  (setq dtrt-indent-verbosity 0))

;; Package: ws-butler
(use-package ws-butler
  :init
  (add-hook 'prog-mode-hook 'ws-butler-mode)
  (add-hook 'text-mode 'ws-butler-mode)
  (add-hook 'fundamental-mode 'ws-butler-mode))

;; PACKAGE: comment-dwim-2
(use-package comment-dwim-2
  :bind (("M-;" . comment-dwim-2))
  )

;; PACKAGE: anzu
;; GROUP: Editing -> Matching -> Isearch -> Anzu
(use-package anzu
  :init
  (global-anzu-mode)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))

;; PACKAGE: iedit
(use-package iedit
  :bind (("C-;" . iedit-mode))
  :init
  (setq iedit-toggle-key-default nil))

;; Customized functions
(defun prelude-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first. If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)

(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a single
line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (message "Copied line")
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single
  line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

;; kill a line, including whitespace characters until next non-whiepsace character
;; of next line
(defadvice kill-line (before check-position activate)
  (if (member major-mode
              '(emacs-lisp-mode scheme-mode lisp-mode
                                c-mode c++-mode objc-mode
                                latex-mode plain-tex-mode))
      (if (and (eolp) (not (bolp)))
          (progn (forward-char 1)
                 (just-one-space 0)
                 (backward-char 1)))))

;; taken from prelude-editor.el
;; automatically indenting yanked text if in programming-modes
(defvar yank-indent-modes
  '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or yank-popped).
Only modes that don't derive from `prog-mode' should be listed here.")

(defvar yank-indent-blacklisted-modes
  '(python-mode slim-mode haml-mode)
  "Modes for which auto-indenting is suppressed.")

(defvar yank-advised-indent-threshold 1000
  "Threshold (# chars) over which indentation does not automatically occur.")

(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) yank-advised-indent-threshold)
      (indent-region beg end nil)))

(defadvice yank (after yank-indent activate)
  "If current mode is one of 'yank-indent-modes,
indent yanked text (with prefix arg don't indent)."
  (if (and (not (ad-get-arg 0))
           (not (member major-mode yank-indent-blacklisted-modes))
           (or (derived-mode-p 'prog-mode)
               (member major-mode yank-indent-modes)))
      (let ((transient-mark-mode nil))
        (yank-advised-indent-function (region-beginning) (region-end)))))

(defadvice yank-pop (after yank-pop-indent activate)
  "If current mode is one of `yank-indent-modes',
indent yanked text (with prefix arg don't indent)."
  (when (and (not (ad-get-arg 0))
             (not (member major-mode yank-indent-blacklisted-modes))
             (or (derived-mode-p 'prog-mode)
                 (member major-mode yank-indent-modes)))
    (let ((transient-mark-mode nil))
      (yank-advised-indent-function (region-beginning) (region-end)))))

;; prelude-core.el
(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

;; prelude-editing.el
(defcustom prelude-indent-sensitive-modes
  '(coffee-mode python-mode slim-mode haml-mode yaml-mode)
  "Modes for which auto-indenting is suppressed."
  :type 'list)

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (unless (member major-mode prelude-indent-sensitive-modes)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))
      (whitespace-cleanup))))

(global-set-key (kbd "C-c i") 'indent-region-or-buffer)

;; add duplicate line function from Prelude
;; taken from prelude-core.el
(defun prelude-get-positions-of-line-or-region ()
  "Return positions (beg . end) of the current line
or region."
  (let (beg end)
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (cons beg end)))

;; smart openline
(defun prelude-smart-open-line (arg)
  "Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode.
With a prefix ARG open line above the current line."
  (interactive "P")
  (if arg
      (prelude-smart-open-line-above)
    (progn
      (move-end-of-line nil)
      (newline-and-indent))))

(defun prelude-smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-o") 'prelude-smart-open-line)
(global-set-key (kbd "M-o") 'open-line)
(use-package projectile
  :bind-keymap ("C-x p" . projectile-command-map)
  :init
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'ivy)

  )
;; (use-package helm
;;   :config
;;   (use-package helm-gtags
;;     :init

;;     (setq helm-gtags-ignore-case t
;;           helm-gtags-auto-update t
;;           helm-gtags-use-input-at-cursor t
;;           helm-gtags-pulse-at-cursor t
;;           helm-gtags-prefix-key "\C-cg"
;;           helm-gtags-suggested-key-mapping t)

;;     ;; Enable helm-gtags-mode in Dired so you can jump to any tag
;;     ;; when navigate project tree with Dired
;;     (add-hook 'dired-mode-hook 'helm-gtags-mode)

;;     ;; Enable helm-gtags-mode in Eshell for the same reason as above
;;     (add-hook 'eshell-mode-hook 'helm-gtags-mode)

;;     ;; Enable helm-gtags-mode in languages that GNU Global supports
;;     (add-hook 'c-mode-hook 'helm-gtags-mode)
;;     (add-hook 'c++-mode-hook 'helm-gtags-mode)
;;     (add-hook 'java-mode-hook 'helm-gtags-mode)
;;     (add-hook 'asm-mode-hook 'helm-gtags-mode)

;;     ;; key bindings

;;     (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
;;     (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
;;     (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
;;     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
;;     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
;;     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
;;     )
;;   )

(use-package ggtags
  :init
  (add-hook 'c-mode-hook 'ggtags-mode)
  (add-hook 'c++-mode-hook 'ggtags-mode)
  )
(use-package prescient
  :config
  (prescient-persist-mode))

(use-package ivy
  :init
  (ivy-mode 1)
  (global-set-key (kbd "M-s o") 'swiper)
  (use-package ivy-prescient
    :init (ivy-prescient-mode))
  (use-package ivy-posframe
    :init
    (ivy-posframe-mode 1)
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display))))
  (use-package counsel
    :init
    (counsel-mode 1)
    )
  (use-package flyspell-correct-ivy
    :after (:all flyspell ivy)
    )
  )

;; (use-package counsel-gtags
;;   :bind-keymap ("C-c g" . counsel-gtags-command-map)
;;   :config
;;   (counsel-gtags-mode 1)
;;   (add-hook 'c-mode-hook 'counsel-gtags-mode)
;;   (add-hook 'c++-mode-hook 'counsel-gtags-mode)
;;   (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
;;   (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
;;   (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
;;   (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)
;;   (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-dwim))

(use-package counsel-projectile
  :config
  (counsel-projectile-mode 1)
  )

(use-package ede
  :init
  (global-ede-mode)
  )
(use-package semantic
  :init
  ;; (global-semanticdb-minor-mode 1)
  ;; (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)

  (setq semantic-new-buffer-setup-functions
        (remove-if (lambda (buffer-setup-function)
                     (member (car buffer-setup-function)
                             '(python-mode html-mode)))
                   semantic-new-buffer-setup-functions))

  (remove-hook 'python-mode-hook 'wisent-python-default-setup)
  )



(use-package irony
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)

  (defun my-irony-mode-hook ()
    "Custom irony mode hook to remap keys."
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))

  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)


  (setq-mode-local c-mode semanticdb-find-default-throttle
                   '(local project unloaded recursive))
  (setq-mode-local c++-mode semanticdb-find-default-throttle
                   '(local project unloaded recursive))

  (semantic-remove-system-include "/usr/include/" 'c++-mode)
  (semantic-remove-system-include "/usr/local/include/" 'c++-mode)
  (add-hook 'semantic-init-hooks
            'semantic-reset-system-include)
  )

(use-package company
  :defer t
  :bind (:map company-active-map ("<tab>" . company-complete-selection))
  :config

  (use-package company-prescient
    :init (company-prescient-mode))

  (use-package rtags
    :init
    (use-package company-rtags))

  (use-package company-irony
    :init
    (use-package company-irony-c-headers
      :init
      (add-to-list 'company-backends 'company-irony-c-headers)
      ))
  ;; (use-package company-yasnippet)
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq frame-set-background-mode t)
  (setq x-gtk-use-system-tooltips nil)
  (setq tooltip-frame-parameters 1)

  (setq company-backends (delete 'company-semantic company-backends))
  (setq company-idle-delay 0.8)
  (add-to-list
   'company-backends '(company-irony
                       ;; company-yasnippet
                       company-clang
                       company-rtags
                       company-files
                       company-keywords
                       company-capf))
  (setq company-abbrev 'company-dabbrev)

  (defun company-backend-with-yas (backends)
    "Add :with company-yasnippet to company BACKENDS.
Taken from https://github.com/syl20bnr/spacemacs/pull/179."
    (if (and (listp backends) (memq 'company-yasnippet backends))
        backends
      (append (if (consp backends)
                  backends
                (list backends))
              '(:with company-yasnippet))))

  ;; add yasnippet to all backends
  (setq company-backends
        (mapcar 'company-backend-with-yas company-backends))

  )
(use-package company-posframe
  :hook (company-mode . company-posframe-mode))
(use-package company-box
  :hook (company-mode . company-box-mode)
  :after (company ivy-posframe)
  :config
  (setq company-box-icons-alist 'company-box-icons-images)

  (setq company-box-doc-delay 0.8)
  (setq company-box-max-candidates 1000)
  (setq company-box-show-single-candidate t)
  (setq company-tooltip-align-annotations t)

  )
(use-package company-quickhelp
  :defines company-quickhelp-delay
  :bind (:map company-active-map
              ("M-h" . company-quickhelp-manual-begin))
  :hook (global-company-mode . company-quickhelp-mode)
  :custom (company-quickhelp-delay 0.8))
;; Folding code
(use-package hideshow
  :init
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))

  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (toggle-selective-display column)))
  (global-set-key (kbd "M-<up>") 'beginning-of-defun)
  (global-set-key (kbd "M-<down>") 'end-of-defun)
  (global-set-key (kbd "C-x \\") 'toggle-hiding)
  (global-set-key (kbd "C-\\") 'toggle-selective-display)
  (add-hook 'c-mode-common-hook  'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)

  )
(use-package aggressive-indent
  :init
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )
;; Fix indent in orgmode
(setq org-src-tab-acts-natively t)

(defun my-org-mode-hook ()
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'my-org-mode-hook)
;; (use-package helm-ag)
(use-package markdown-mode
  ;; :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package tex
  :straight auctex
  :defer t
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)

  (setq TeX-save-query nil)
  ;; (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t
        TeX-source-correlate-method 'synctex
        )
  (setq reftex-plug-into-AUCTeX t)

  (defun guess-TeX-master (filename)
    "Guess the master file for FILENAME from currently open .tex files."
    (let ((candidate nil)
          (filename (file-name-nondirectory filename)))
      (save-excursion
        (dolist (buffer (buffer-list))
          (with-current-buffer buffer
            (let ((name (buffer-name))
                  (file buffer-file-name))
              (if (and file (string-match "\\.tex$" file))
                  (progn
                    (goto-char (point-min))
                    (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
                        (setq candidate file))
                    (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
                        (setq candidate file))))))))
      (if candidate
          (message "TeX master document: %s" (file-name-nondirectory candidate)))
      candidate))
  (add-hook 'LaTeX-mode-hook
            '(lambda ()
               (setq TeX-master (guess-TeX-master (buffer-file-name)))))
  ;; revert pdf-view after compilation
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;
  )
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-resize-factor 1.1)

  )

;; Disable temp files
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq auto-save-default nil)
(use-package sublimity
  :init
  (sublimity-mode 1))

;; (setq  helm-display-function 'helm-display-buffer-in-own-frame
;;        ;; helm-display-function 'my-helm-display-child-frame
;;        helm-display-buffer-reuse-frame t
;;        helm-display-buffer-width 100)

(defun reload-configs ()
  ;; Reload the config file
  (interactive)
  (load-file "~/.emacs")
  )
(defun open-config-file ()
  "Open this file"
  (interactive)
  (find-file "~/.emacs")
  (org-mode)

  )
(define-key global-map (kbd "<f9>") 'reload-configs)
(define-key global-map (kbd "<f5>") 'redraw-display)

;; define function to shutdown emacs server instance
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

;;    (use-package jupyter
;;    :init
;;  (use-package zmq))
(use-package ace-window
  :bind
  (("M-o". 'ace-window))
  )
(use-package avy
  :init
  :bind
  (("C-c SPC". 'avy-goto-word-1))
  (("M-g g". 'avy-goto-line))
  )

(use-package auto-complete
  :init
  (use-package popup))
(use-package ein
  :init
  (setq ein:use-auto-complete-superpack t)
  :bind
  (("C-<return>". 'ein:worksheet-execute-cell-km))
  )
(setq org-support-shift-select t)
;; Save sessions
;; (setq desktop-save-mode t)
;; ;;
;; Mouse scrolling in terminal
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)

;; Mouse clicks
(xterm-mouse-mode +1)
;; terminal

(use-package vterm
  :init
  (define-key global-map (kbd "<f2>") 'vterm )
  )
(global-auto-revert-mode t)
;;(add-hook 'emacs-startup-hook 'desktop-read)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#ffffff" "#f36c60" "#8bc34a" "#fff59d" "#4dd0e1" "#b39ddb" "#81d4fa" "#263238"))
 '(default-input-method "rfc1345")
 '(fci-rule-color "#212121")
 '(hl-sexp-background-color "#121212")
 '(hl-todo-keyword-faces
   '(("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2aa198")
     ("PROG" . "#268bd2")
     ("OKAY" . "#268bd2")
     ("DONT" . "#d70000")
     ("FAIL" . "#d70000")
     ("DONE" . "#86dc2f")
     ("NOTE" . "#875f00")
     ("KLUDGE" . "#875f00")
     ("HACK" . "#875f00")
     ("TEMP" . "#875f00")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f")))
 '(package-selected-packages
   '(magit counsel-etags pdf-tools auctex semantics company-irony elpy ace-window avy ace-jump-mode jedi auto-complete jupyter vterm cmake-mode helm-ag zone-nyan nyan-mode org-beautify-theme company-c-headers redo+ centaur-tabs selectrum helm-smex smex function-args aggressive-indent immaterial-theme atom-dark-theme badger-theme gruvbox-theme nimbus-theme docker-compose-mode dashboard vimish-fold dimmer neotree zoom spacemacs-theme smart-mode-line-atom-one-dark-theme atom-one-dark-theme material-theme flycheck dracula-theme zygospore yasnippet ws-butler volatile-highlights use-package undo-tree iedit dtrt-indent counsel-projectile company clean-aindent-mode anzu))
 '(pdf-view-continuous t)
 '(pdf-view-midnight-colors '("#b2b2b2" . "#262626"))
 '(tetris-x-colors
   [[229 192 123]
    [97 175 239]
    [209 154 102]
    [224 108 117]
    [152 195 121]
    [198 120 221]
    [86 182 194]])
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   '((20 . "#B71C1C")
     (40 . "#FF5722")
     (60 . "#FFA000")
     (80 . "#558b2f")
     (100 . "#00796b")
     (120 . "#2196f3")
     (140 . "#4527A0")
     (160 . "#B71C1C")
     (180 . "#FF5722")
     (200 . "#FFA000")
     (220 . "#558b2f")
     (240 . "#00796b")
     (260 . "#2196f3")
     (280 . "#4527A0")
     (300 . "#B71C1C")
     (320 . "#FF5722")
     (340 . "#FFA000")
     (360 . "#558b2f")))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(provide 'emacs)
;;; emacs ends here
