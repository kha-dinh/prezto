;;; packge --- Summary
;;; Commentary:
;;; Code:
;; Bug fix for newer Emacs
(defmacro define-obsolete-function-alias ( obsolete-name current-name
                                           &optional when docstring)
  "Set OBSOLETE-NAME's function definition to CURRENT-NAME and mark it obsolete.
\(define-obsolete-function-alias \\='old-fun \\='new-fun \"22.1\" \"old-fun's doc.\")
is equivalent to the following two lines of code:
\(defalias \\='old-fun \\='new-fun \"old-fun's doc.\")
\(make-obsolete \\='old-fun \\='new-fun \"22.1\")
WHEN should be a string indicating when the function was first
made obsolete, for example a date or a release number.
See the docstrings of `defalias' and `make-obsolete' for more details."
  (declare (doc-string 4)
           (advertised-calling-convention
            ;; New code should always provide the `when' argument
            (obsolete-name current-name when &optional docstring) "23.1"))
  `(progn
     (defalias ,obsolete-name ,current-name ,docstring)
     (make-obsolete ,obsolete-name ,current-name ,when)))
;; Straight:
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
;; Key bindings
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x C-k") 'kill-buffer-and-window)
(global-set-key (kbd "C-x C-r") 'eval-region)
(global-set-key (kbd "M-<up>") 'beginning-of-defun)
(global-set-key (kbd "M-p") 'beginning-of-defun)
(global-set-key (kbd "M-<down>") 'end-of-defun)
(global-set-key (kbd "M-n") 'end-of-defun)

(use-package hydra)
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(setq tramp-verbose 1)
(global-set-key
 (kbd "C-n")
 (defhydra hydra-move
   (:body-pre (next-line))
   "move"
   ("n" next-line)
   ("p" previous-line)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("M-p" beginning-of-defun)
   ("M-n" end-of-defun)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)
   ("o" nil nil)))

(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                     :color pink
                                     :post (deactivate-mark))
  "
  ^_k_^     _d_elete    _s_tring
_h_   _l_   _o_k        _y_ank
  ^_j_^     _n_ew-copy  _r_eset
^^^^        _e_xchange  _u_ndo
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("e" exchange-point-and-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))

(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
;; Magitk
(use-package magit)
;; Directory tree
(use-package treemacs
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t f" . treemacs-find-file)
        ("C-x t ." . treemacs-find-tag)
        ("C-x t p"   . treemacs-projectile)
        )
  :config
  ;; (global-set-key [f8] 'neotree-toggle)
  ;; (treemacs-resize-icons 22)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple))))

(use-package treemacs-projectile
  :after treemacs projectile
  )
(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  )

;; Auto resize windows
(use-package zoom
  :config
  (zoom-mode)
  (setq zoom-size '(0.618 . 0.8))
  )
;; Dashboard
(use-package dashboard
  :config
  (
   dashboard-setup-startup-hook)
  )
;; Dim other panels when not used
(use-package dimmer
  :config
  (dimmer-mode)
  (dimmer-configure-which-key)
  (dimmer-configure-company-box)
  (dimmer-configure-magit)
  (dimmer-configure-posframe)
  ;; (dimmer-fraction 0.6)
  )
;; Centaur tabs
(use-package centaur-tabs
  :init
  (centaur-tabs-mode +1)
  (global-set-key (kbd "C-x <left>")  'centaur-tabs-backward)
  (global-set-key (kbd "C-x <right>") 'centaur-tabs-forward)
  (centaur-tabs-headline-match)
  (centaur-tabs-group-by-projectile-project)
  :config
  (setq centaur-tabs-style "wave")
  (setq centaur-tabs-set-icons t)
  )

(use-package nyan-mode
  :init
  (setq nyan-wavy-trail t)
  (setq nyan-animation-frame-interval 0.1)
  :config
  (nyan-start-animation)
  )
;;(setq zone-timer (run-with-idle-timer  t 'zone))
(use-package material-theme
  :straight (material-theme :type git :host github :repo "cpaulik/emacs-material-theme"
                            :fork (:host github
                                         :repo "kha-dinh/emacs-material-theme"))
  :hook
  (after-init . (lambda () (load-theme 'material t)))
  )


;;;;;;;;;;;;;;;;;;;;;;;
;; PROGRAMMING
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package jedi
  :custom
  (jedi:complete-on-dot t)
  (jedi:get-in-function-call-delay 5000)
  (jedi:tooltip-medthod nil)
  :hook
  (python-mode . jedi:setup)
  :config
  (jedi:install-server))

(use-package elpy
  :config
  (elpy-enable)
  (setq elpy-rpc-backend "jedi")
  )
;; Auto follow symlink without asking
(setq vc-follow-symlinks t)
(setq c-default-style "linux")
(setq c-basic-offset 2)

;;    Auto close brackets
(electric-pair-mode)

;; linker scrip mode
(use-package ld-mode
  :straight (ld-mode :type git :host github :repo "spenczar/ld-mode")
  :config
  (ld-mode)
  )
(use-package flycheck
  :init
  (global-flycheck-mode)
  (defun include-paths ()
    ;; Add include dir to path
    (setq flycheck-clang-include-path (list (expand-file-name "../include"))))
  :hook ((c++-mode . include-paths)
         (c-mode . include-paths)
         (c++-mode . (lambda () (setq flycheck-clang-language-standard "c++11")))
         )
  )
(use-package flycheck-color-mode-line
  :after flycheck
  :init
  (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
(use-package flycheck-pos-tip
  :after flycheck
  :custom
  (flycheck-pos-tip-timeout nil)
  :init
  (flycheck-pos-tip-mode))
(use-package flycheck-irony
  :after flycheck
  :init
  (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
(use-package flycheck-checkbashisms
  :after flycheck
  :init
  :hook
  (flycheck-mode . flycheck-checkbashisms-setup)
  )
(menu-bar-mode -1)
(tool-bar-mode -1)

(setq gc-cons-threshold 100000000)
(setq inhibit-startup-message t)

(defalias 'yes-or-no-p 'y-or-n-p)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook
          (lambda () (interactive)
            (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;; Compilation
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

;; setup GDB
(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t
 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )


;; Package zygospore
(use-package zygospore
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
         ("RET" .   newline-and-indent)))

;; automatically indent when press RET
;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)
(windmove-default-keybindings)

(setq global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
      mark-ring-max 5000                ; increase kill ring to contains 5000 entries
      mode-require-final-newline t      ; add a newline to end of file
      tab-width 4                       ; default to 4 visible spaces to display a tab
      make-backup-files nil
      create-lockfiles nil
      auto-save-default nil
      )

;; GROUP: Editing -> Killing
(setq kill-ring-max 5000 ; increase kill-ring capacity
      kill-whole-line t  ; if NIL, kill whole line and move the next line up
      )
(add-hook 'sh-mode-hook (lambda ()
                          (setq tab-width 4)))

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)


;; Fix indent in orgmode


(setq-default indent-tabs-mode nil)
(delete-selection-mode)
(global-set-key (kbd "RET") 'newline-and-indent)



;; show whitespace in diff-mode
(add-hook 'diff-mode-hook (lambda ()
                            (setq-local whitespace-style
                                        '(face
                                          tabs
                                          tab-mark
                                          spaces
                                          space-mark
                                          trailing
                                          indentation::space
                                          indentation::tab
                                          newline
                                          newline-mark))
                            (whitespace-mode 1)))

;; Package: volatile-highlights
;; GROUP: Editing -> Volatile Highlights
(use-package volatile-highlights
  :init
  (volatile-highlights-mode t))

;; Package: undo-tree
;; GROUP: Editing -> Undo -> Undo Tree
(use-package undo-tree
  :bind
  (("C-/" . 'undo-tree-undo))
  (("C-x C-/" . 'undo-tree-redo))
  :init
  (global-undo-tree-mode 1))

;; Package: yasnippet
;; GROUP: Editing -> Yasnippet
;; Package: yasnippet
(use-package yasnippet-snippets
  :after yasnippet)
(use-package yasnippet
  :defer t
  :hook
  (prog-mode . yas-minor-mode))
(use-package clean-aindent-mode
  :hook
  (prog-mode . clean-aindent-mode))

;; Package: dtrt-indent
(use-package dtrt-indent
  :init
  (dtrt-indent-mode 1)
  (setq dtrt-indent-verbosity 0))

;; Package: ws-butler
(use-package ws-butler
  :hook
  (
   (prog-mode . ws-butler-mode)
   (text-mode . ws-butler-mode)
   (fundamental-mode . ws-butler-mode)))

;; PACKAGE: comment-dwim-2
(use-package comment-dwim-2
  :bind (("M-;" . comment-dwim-2))
  )

;; PACKAGE: anzu
;; GROUP: Editing -> Matching -> Isearch -> Anzu
(use-package anzu
  :init
  (global-anzu-mode)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))

;; PACKAGE: iedit
(use-package iedit
  :bind (("C-;" . iedit-mode))
  :init
  (setq iedit-toggle-key-default nil))

;; Customized functions
(defun prelude-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first. If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)

(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a single
line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (message "Copied line")
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single
  line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

;; kill a line, including whitespace characters until next non-whiepsace character
;; of next line
(defadvice kill-line (before check-position activate)
  (if (member major-mode
              '(emacs-lisp-mode scheme-mode lisp-mode
                                c-mode c++-mode objc-mode
                                latex-mode plain-tex-mode))
      (if (and (eolp) (not (bolp)))
          (progn (forward-char 1)
                 (just-one-space 0)
                 (backward-char 1)))))

;; taken from prelude-editor.el
;; automatically indenting yanked text if in programming-modes
(defvar yank-indent-modes
  '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or yank-popped).
Only modes that don't derive from `prog-mode' should be listed here.")

(defvar yank-indent-blacklisted-modes
  '(python-mode slim-mode haml-mode)
  "Modes for which auto-indenting is suppressed.")

(defvar yank-advised-indent-threshold 1000
  "Threshold (# chars) over which indentation does not automatically occur.")

(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) yank-advised-indent-threshold)
      (indent-region beg end nil)))

(defadvice yank (after yank-indent activate)
  "If current mode is one of 'yank-indent-modes,
indent yanked text (with prefix arg don't indent)."
  (if (and (not (ad-get-arg 0))
           (not (member major-mode yank-indent-blacklisted-modes))
           (or (derived-mode-p 'prog-mode)
               (member major-mode yank-indent-modes)))
      (let ((transient-mark-mode nil))
        (yank-advised-indent-function (region-beginning) (region-end)))))

(defadvice yank-pop (after yank-pop-indent activate)
  "If current mode is one of `yank-indent-modes',
indent yanked text (with prefix arg don't indent)."
  (when (and (not (ad-get-arg 0))
             (not (member major-mode yank-indent-blacklisted-modes))
             (or (derived-mode-p 'prog-mode)
                 (member major-mode yank-indent-modes)))
    (let ((transient-mark-mode nil))
      (yank-advised-indent-function (region-beginning) (region-end)))))

;; prelude-core.el
(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

;; prelude-editing.el
(defcustom prelude-indent-sensitive-modes
  '(coffee-mode python-mode slim-mode haml-mode yaml-mode)
  "Modes for which auto-indenting is suppressed."
  :type 'list)

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (unless (member major-mode prelude-indent-sensitive-modes)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))
      (whitespace-cleanup))))

(global-set-key (kbd "C-c i") 'indent-region-or-buffer)

;; add duplicate line function from Prelude
;; taken from prelude-core.el
(defun prelude-get-positions-of-line-or-region ()
  "Return positions (beg . end) of the current line
or region."
  (let (beg end)
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (cons beg end)))

;; smart openline
(defun prelude-smart-open-line (arg)
  "Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode.
With a prefix ARG open line above the current line."
  (interactive "P")
  (if arg
      (prelude-smart-open-line-above)
    (progn
      (move-end-of-line nil)
      (newline-and-indent))))

(defun prelude-smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-o") 'prelude-smart-open-line)
(global-set-key (kbd "M-o") 'open-line)

(use-package projectile
  :bind-keymap ("C-x p" . projectile-command-map)
  :config
  (projectile-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'ivy))
;; (use-package helm
;;   :config
;;   (use-package helm-gtags
;;     :init

;;     (setq helm-gtags-ignore-case t
;;           helm-gtags-auto-update t
;;           helm-gtags-use-input-at-cursor t
;;           helm-gtags-pulse-at-cursor t
;;           helm-gtags-prefix-key "\C-cg"
;;           helm-gtags-suggested-key-mapping t)

;;     ;; Enable helm-gtags-mode in Dired so you can jump to any tag
;;     ;; when navigate project tree with Dired
;;     (add-hook 'dired-mode-hook 'helm-gtags-mode)

;;     ;; Enable helm-gtags-mode in Eshell for the same reason as above
;;     (add-hook 'eshell-mode-hook 'helm-gtags-mode)

;;     ;; Enable helm-gtags-mode in languages that GNU Global supports
;;     (add-hook 'c-mode-hook 'helm-gtags-mode)
;;     (add-hook 'c++-mode-hook 'helm-gtags-mode)
;;     (add-hook 'java-mode-hook 'helm-gtags-mode)
;;     (add-hook 'asm-mode-hook 'helm-gtags-mode)

;;     ;; key bindings

;;     (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
;;     (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
;;     (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
;;     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
;;     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
;;     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
;;     )
;;   )

(use-package ggtags
  :hook (
         (c-mode . ggtags-mode)
         (c++-mode . ggtags-mode)))
(use-package prescient
  :config
  (prescient-persist-mode))
(use-package ivy
  :config
  (setq ivy-use-selectable-prompt t)
  (define-key ivy-minibuffer-map (kbd "C-n") 'ivy-next-line)
  (define-key ivy-minibuffer-map (kbd "C-p") 'ivy-previous-line)
  (global-set-key (kbd "M-s o") 'swiper)
  (ivy-mode 1))

(use-package all-the-icons-ivy-rich
  :after ivy
  :init (all-the-icons-ivy-rich-mode 1))
(use-package ivy-rich
  :init (ivy-rich-mode 1))
(use-package lsp-ivy
  :after ivy)

(use-package lsp-treemacs
  :config
  (lsp-treemacs-sync-mode 1))
;; (use-package lsp-mode)
(use-package powerthesaurus
  :bind
  (("C-x t s" . powerthesaurus-lookup-word-dwim)))


(use-package grammarly
  ;; :custom ((grammarly-username "hojoon.lee@skku.edu")
  ;;          (grammarly-password "Ttlxmpa-l33t"))
  :config
  ;; (add-to-list 'grammarly-on-message-function-list 'test-on-message)
  ;; (defun test-on-message (data)
  ;;   "On message callback with DATA."
  ;;   (message "[DATA] %s" data))
  )
;; (setcdr (nth 1 auth) grammarly--cookies)
;; Set callback for receiving data.
;; (grammarly-check-text "Hello World")
(use-package flycheck-grammarly
  :after grammarly)
;; :hook
;; ((LaTeX-mode . flyspell-grammarly)))
(use-package lsp-latex
  :straight (lsp-latex :type git :host github :repo "ROCKTAKEY/lsp-latex")
  :custom
  (lsp-latex-texlab-executable "~/.cargo/bin/texlab")
  (lsp-latex-forward-search-executable "emacsclient")
  (lsp-latex-forward-search-args
   '("--eval"
     "(lsp-latex-forward-search-with-pdf-tools \"%f\" \"%p\" \"%l\")"))
  (lsp-latex-forward-search-after "true")

  :hook
  ((tex-mode . lsp)
   (LaTeX-mode . lsp)
   (bibtex-mode . lsp))
  )
(use-package flyspell-correct-ivy
  :after (:all flyspell ivy))
(use-package counsel
  :after ivy
  :init
  (counsel-mode 1))
(use-package ivy-posframe
  :after ivy
  :init
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
  (ivy-posframe-mode 1))

(use-package ivy-prescient
  :after ivy
  :init
  (ivy-prescient-mode))
;; (use-package counsel-gtags
;;   :bind-keymap ("C-c g" . counsel-gtags-command-map)
;;   :config
;;   (counsel-gtags-mode 1)
;;   (add-hook 'c-mode-hook 'counsel-gtags-mode)
;;   (add-hook 'c++-mode-hook 'counsel-gtags-mode)
;;   (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
;;   (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
;;   (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
;;   (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)
;;   (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-dwim))

(use-package counsel-projectile
  :config
  (counsel-projectile-mode 1)
  )

(use-package ede
  :config
  (global-ede-mode))
(use-package semantic
  :config
  ;; (global-semanticdb-minor-mode 1)
  ;; (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)
  (setq semantic-new-buffer-setup-functions
        (cl-remove-if (lambda (buffer-setup-function)
                        (member (car buffer-setup-function)
                                '(python-mode html-mode)))
                      semantic-new-buffer-setup-functions))
  (remove-hook 'python-mode-hook 'wisent-python-default-setup))



(use-package irony
  :init
  (defun my-irony-mode-hook ()
    "Custom irony mode hook to remap keys."
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))


  (setq-mode-local c-mode semanticdb-find-default-throttle
                   '(local project unloaded recursive))
  (setq-mode-local c++-mode semanticdb-find-default-throttle
                   '(local project unloaded recursive))
  (semantic-remove-system-include "/usr/include/" 'c++-mode)
  (semantic-remove-system-include "/usr/local/include/" 'c++-mode)
  :hook (
         (c++-mode . irony-mode)
         (c-mode .irony-mode)
         (objc-mode . irony-mode)
         (irony-mode . irony-cdb-autosetup-compile-options)
         (irony-mode . company-irony-setup-begin-commands)
         (irony-mode . my-irony-mode-hook)
         (semantic-init . semantic-reset-system-include)))
(use-package company
  :bind (:map company-active-map ("<tab>" . company-complete-selection))
  :custom
  (frame-set-background-mode t)
  (x-gtk-use-system-tooltips nil)
  (tooltip-frame-parameters 1)
  (company-backends (delete 'company-semantic company-backends))
  (company-idle-delay 0.2)
  (company-abbrev 'company-dabbrev)
  (company-preview-if-just-one-frontend t)
  :config
  (global-company-mode)
  (add-to-list
   'company-backends '(company-irony
                       company-clang
                       company-rtags
                       company-files
                       company-keywords
                       company-capf
                       company-yasnippet
                       )))
(use-package company-prescient
  :after company prescient
  :init (company-prescient-mode))
(use-package rtags)
(use-package company-rtags
  :after company rtags)
(use-package company-irony
  :after company irony)
(use-package company-irony-c-headers
  :after company irony company-irony
  :config
  (add-to-list 'company-backends 'company-irony-c-headers))

;; (use-package company-yasnippet
;;   :after company
;;   :config
;;   (defun company-backend-with-yas (backends)
;;     "Add :with company-yasnippet to company BACKENDS.
;; Taken from https://github.com/syl20bnr/spacemacs/pull/179."
;;     (if (and (listp backends) (memq 'company-yasnippet backends))
;;         backends
;;       (append (if (consp backends)
;;                   backends
;;                 (list backends))
;;               '(:with company-yasnippet))))
;;   ;; add yasnippet to all backends
;;   (setq company-backends
;;         (mapcar 'company-backend-with-yas company-backends)))

(use-package company-posframe
  :after company
  :hook (company-mode . company-posframe-mode))

(use-package company-box
  :hook (company-mode . company-box-mode)
  :after (company ivy-posframe)
  :custom
  (company-box-icons-alist 'company-box-icons-images)
  (company-box-doc-delay 0.2)
  (company-box-show-single-candidate t)
  (company-tooltip-align-annotations t)
  )
(use-package company-quickhelp
  :after company
  :defines company-quickhelp-delay
  :bind (:map company-active-map
              ("M-h" . company-quickhelp-manual-begin))

  :custom (company-quickhelp-delay 0.2)
  :config
  (company-quickhelp-mode)
  )
;; Folding code
(use-package hideshow
  :init
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))

  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (toggle-selective-display column)))
  (global-set-key (kbd "C-x \\") 'toggle-hiding)
  (global-set-key (kbd "C-\\") 'toggle-selective-display)
  (add-hook 'c-mode-common-hook  'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)

  )
(use-package aggressive-indent
  :init
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )

(defun my-org-mode-hook ()
  "My org mode hook."
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)
  (setq org-support-shift-select t)
  (setq org-src-tab-acts-natively t)
  )
(add-hook 'org-mode-hook #'my-org-mode-hook)

(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom (markdown-command "multimarkdown"))

(use-package tex
  :straight auctex
  ;; :mode ("\\.tex\\'" . LaTeX-mode)
  :hook (
         (LaTeX-mode . visual-line-mode)
         (LaTeX-mode . flyspell-mode)
         (LaTeX-mode . LaTeX-math-mode)
         (LaTeX-mode . reftex-mode)
         (LaTeX-mode . TeX-PDF-mode)
         (LaTeX-mode . TeX-source-correlate-mode)

         ;; revert pdf-view after compilation
         (TeX-after-compilation-finished-functions . #'TeX-revert-document-buffer) ;
         )
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (TeX-view-program-selection '((output-pdf "PDF Tools"))
                              TeX-source-correlate-start-server t
                              TeX-source-correlate-method 'synctex
                              )
  (reftex-plug-into-AUCTeX t)
  (reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
  :config
  ;; (dolist (hook '(latex-mode-hook LaTeX-mode-hook)))
  ;; (setq-default TeX-master nil)

  ;; (defun guess-TeX-master (filename)
  ;;   "Guess the master file for FILENAME from currently open .tex files."
  ;;   (let ((candidate nil)
  ;;         (filename (file-name-nondirectory filename)))
  ;;     (save-excursion
  ;;       (dolist (buffer (buffer-list))
  ;;         (with-current-buffer buffer
  ;;           (let ((name (buffer-name))
  ;;                 (file buffer-file-name))
  ;;             (if (and file (string-match "\\.tex$" file))
  ;;                 (progn
  ;;                   (goto-char (point-min))
  ;;                   (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
  ;;                       (setq candidate file))
  ;;                   (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
  ;;                       (setq candidate file))))))))
  ;;     (if candidate
  ;;         (message "TeX master document: %s" (file-name-nondirectory candidate)))
  ;;     candidate))
  ;; (add-hook 'LaTeX-mode-hook
  ;;           '(lambda ()
  ;;              (setq TeX-master (guess-TeX-master (buffer-file-name)))))
  )

(use-package company-bibtex
  :after company tex
  :init
  (add-to-list 'company-backends '(company-bibtex))
  )

(use-package company-reftex
  :after company tex
  :init
  (add-to-list 'company-backends '(company-reftex-labels company-reftex-citations))
  )

;; (use-package company-auctex
;;   :after company tex
;;   :config
;;   (add-to-list 'company-backends 'company-auctex))

(use-package pdf-tools
  :custom
  (pdf-view-display-size 'fit-page)
  (pdf-annot-activate-created-annotations t)
  (pdf-view-resize-factor 1.1)
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query)
  )


(use-package sublimity
  :init
  (sublimity-mode 1))

;; (setq  helm-display-function 'helm-display-buffer-in-own-frame
;;        ;; helm-display-function 'my-helm-display-child-frame
;;        helm-display-buffer-reuse-frame t
;;        helm-display-buffer-width 100)

(defun reload-configs ()
  ;; Reload the config file
  (interactive)
  (load-file "~/.emacs")
  )
(defun open-config-file ()
  "Open this file"
  (interactive)
  (find-file "~/.emacs")
  (org-mode)

  )
(define-key global-map (kbd "<f9>") 'reload-configs)
(define-key global-map (kbd "<f5>") 'redraw-display)

;; define function to shutdown emacs server instance
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

;;    (use-package jupyter
;;    :init
;;  (use-package zmq))
(use-package ace-window
  :bind
  (("M-o". 'ace-window))
  )
(use-package avy
  :bind
  (("C-j". 'avy-goto-word-1))
  (("M-g g". 'avy-goto-line))
  )

(use-package auto-complete
  :init
  (use-package popup))
(use-package ein
  :init
  (setq ein:use-auto-complete-superpack t)
  :bind
  (("C-<return>". 'ein:worksheet-execute-cell-km))
  )

;; Save sessions
;; (setq desktop-save-mode t)
;; ;;
;; Mouse scrolling in terminal
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)

;; Mouse clicks
(xterm-mouse-mode +1)
;; terminal

(use-package vterm
  :init
  (define-key global-map (kbd "<f2>") 'vterm )
  )
(global-auto-revert-mode t)
;;(add-hook 'emacs-startup-hook 'desktop-read)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#ffffff" "#f36c60" "#8bc34a" "#fff59d" "#4dd0e1" "#b39ddb" "#81d4fa" "#263238"))
 '(custom-safe-themes
   '("bbb3b96ad231e1760482aa502801d85d0e6c5dc3ac0a30f9c1820a2a6d1c9983" "270026e67ff525d0c7a60de846baad0c0a3562377849bc46d04c3c82860d6c06" "008f374a54ce67b5445d4a66c24fe28bf686f4f4b9c54a263e9bfaad689552f5" "fedb49ee135e71333adab7253a0c586c0d920881deeff597771935a9d05bb620" "33a4e6dfc22b219c6cc090a6d4602f67062179ea5d21f23adeb549c79d68a7ec" "f83c15d8de78fbba9443b57fdcb534d9cc9f8b77fe13907fd2bddaa7e59ff045" "2881463727c65d61d245e2def8a06b0a19bc3e1facfe212ad4b38a7b405e0663" "4d6405ba2a5440a79cabdc62e67c1d217ce1c44e0504e136eb74af5932c02946" "39a9223b1fdd1c57bbeb610dcdc90d76c1b28f2ddf135e75167360934604311b" "8e80ec02a6e53d47b60961747a35da19b13561f7b9bdba18ae8875cd49c3e880" "d34793246a37dd8ab1e5d43c36182ce3d8426fa6db6d460a8c96f0acb1a66147" "1d6568b56f7ed674dc91ccc7b7bb5dce25486abe179c081e768ed9582dff536a" "f2429ef5091ea6924e1d8356482b5aebd57ce6210d2646af460729c32937d4f2" "90a142485a05accaf1672337c4c83e8f53688df6cca378effa6458040bac4c94" "dbaaeb0ff70c059c54a242c2a73a2cc9066be2b33b63b5cb52a17a3348b61f12" "e51b93cc5601d46a30925693ba332a2eec573bfefd9983aa9a02f3d6deff3221" "d5b79717880118720f8e8c53e8ef39756f0d5f4f5700238464ccdef7d1f9008e" "3f88014c7e6f66efd1e11e1e747ea792276a2eda227f9ed0dcd7c2925c979494" "99280e03896e625260ff33ff70a6a34375b08d87ebff4c170075bfd768665cd6" "9c6357c81303a41d805b2dfbe880221d4f7acd9934c357a59a5df3f89226c21a" "6677d0a333f87a6ed8d50916329b82e4187893fa25c704e0ed0b743d00bf17a7" "5548e52de2bfe337fc1e8625ba6446373d4497ae3f1f8d7bd8858961e999a4b5" "3df18982a8c6c17afc4617a43d2ec3a09a39d91ce66da5fa2f2324a5d9eeaf2a" "db4b48dc4e8ce04b731b43e0bad9d8225d757feda403134486b632edf79b5ec7" "457f6a570500cfefb5e08001eed85b14b090ae9e5b001bf4fe9d61414d725691" "557a1f11fbe7df49965f04a17fd7888a384c84bbf7e6c89b316edf6c891ea3ad" "58b649bbee867c598d31a9de6b12ad66143105ff0b82de63d13e61df4fc0d363" "6ec1023848b5e8e5e9db4cb084a9e7bffcd2e35b574d50b33990888603237fed" "3866ddc59702ab5bc29d4fba04c022ac843af3ab4956d50bb6ecc774f35e54e8" "e8abde0312f496ac275e668050b340265da1ec3ac79c058e56021d032880d8f0" "b59529dc52932ce8d0098312cba67f48c5a4464996589629b41e5fd6b1fa0554" "f47c0e014460b6279407fa863d0325bc0a072aee6253530228e1b2dc0bb62b34" "2a07758a4786cf0dd99442e60e65272ac593b8043392c9f4ff140981a9788d23" "7db71058250e3ccc40549d897cf54b976266299ed782e69234a418f7c05c3366" "dffda2b63f7960ad54f9fd4369e0cb102be25c2f0038badad5cf3fa7328d5231" "fbcd4bac007f765d200a1d0e65ebc98e5192ef7b6e42c4fc16740e1bcb5352fc" "7091672c21df2675f9c0e3c4774526947653a480fd842c93e8cbef8a6e343b10" "448b484b956e2f11a6028b34aa188a33dd52f3351436b76e48acbb1c153d8bef" "84520f3c7f8ab65188e333ac180c3d10ff9dfe70229453952f51227e83d88ee5" "0598d84ffd31cc0bb40cdb1e5ee76304e8f025dfc498df1d96b191ea3f33c7bc" "2a0f701a583921a5d9a3e00b3fca25c7426913f12b1eb9203f3134d3d47e693c" "9f4ac26108e9da0c9ad7c1adcc5bdb1acef6ea369d6578567ca937cbb3145d3b" default))
 '(default-input-method "rfc1345")
 '(fci-rule-color "#212121")
 '(hl-sexp-background-color "#121212")
 '(hl-todo-keyword-faces
   '(("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2aa198")
     ("PROG" . "#268bd2")
     ("OKAY" . "#268bd2")
     ("DONT" . "#d70000")
     ("FAIL" . "#d70000")
     ("DONE" . "#86dc2f")
     ("NOTE" . "#875f00")
     ("KLUDGE" . "#875f00")
     ("HACK" . "#875f00")
     ("TEMP" . "#875f00")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f")))
 '(package-selected-packages
   '(magit counsel-etags pdf-tools auctex semantics company-irony elpy ace-window avy ace-jump-mode jedi auto-complete jupyter vterm cmake-mode helm-ag zone-nyan nyan-mode org-beautify-theme company-c-headers redo+ centaur-tabs selectrum helm-smex smex function-args aggressive-indent immaterial-theme atom-dark-theme badger-theme gruvbox-theme nimbus-theme docker-compose-mode dashboard vimish-fold dimmer neotree zoom spacemacs-theme smart-mode-line-atom-one-dark-theme atom-one-dark-theme material-theme flycheck dracula-theme zygospore yasnippet ws-butler volatile-highlights use-package undo-tree iedit dtrt-indent counsel-projectile company clean-aindent-mode anzu))
 '(pdf-view-continuous t)
 '(pdf-view-midnight-colors '("#b2b2b2" . "#262626"))
 '(tetris-x-colors
   [[229 192 123]
    [97 175 239]
    [209 154 102]
    [224 108 117]
    [152 195 121]
    [198 120 221]
    [86 182 194]])
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   '((20 . "#B71C1C")
     (40 . "#FF5722")
     (60 . "#FFA000")
     (80 . "#558b2f")
     (100 . "#00796b")
     (120 . "#2196f3")
     (140 . "#4527A0")
     (160 . "#B71C1C")
     (180 . "#FF5722")
     (200 . "#FFA000")
     (220 . "#558b2f")
     (240 . "#00796b")
     (260 . "#2196f3")
     (280 . "#4527A0")
     (300 . "#B71C1C")
     (320 . "#FF5722")
     (340 . "#FFA000")
     (360 . "#558b2f")))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(provide 'emacs)
;;; emacs ends here
